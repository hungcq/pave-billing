// Code generated by MockGen. DO NOT EDIT.
// Source: encore.app/billing/core (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "encore.app/billing/models"
	uuid "encore.dev/types/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddLineItemToBill mocks base method.
func (m *MockService) AddLineItemToBill(arg0 context.Context, arg1 uuid.UUID, arg2 *models.AddLineItemRequest) (*models.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLineItemToBill", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLineItemToBill indicates an expected call of AddLineItemToBill.
func (mr *MockServiceMockRecorder) AddLineItemToBill(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLineItemToBill", reflect.TypeOf((*MockService)(nil).AddLineItemToBill), arg0, arg1, arg2)
}

// CloseBill mocks base method.
func (m *MockService) CloseBill(arg0 context.Context, arg1 uuid.UUID) (*models.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseBill", arg0, arg1)
	ret0, _ := ret[0].(*models.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseBill indicates an expected call of CloseBill.
func (mr *MockServiceMockRecorder) CloseBill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBill", reflect.TypeOf((*MockService)(nil).CloseBill), arg0, arg1)
}

// CreateBill mocks base method.
func (m *MockService) CreateBill(arg0 context.Context, arg1 *models.CreateBillRequest) (*models.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBill", arg0, arg1)
	ret0, _ := ret[0].(*models.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBill indicates an expected call of CreateBill.
func (mr *MockServiceMockRecorder) CreateBill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBill", reflect.TypeOf((*MockService)(nil).CreateBill), arg0, arg1)
}

// GetBillByID mocks base method.
func (m *MockService) GetBillByID(arg0 context.Context, arg1 uuid.UUID) (*models.Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillByID indicates an expected call of GetBillByID.
func (mr *MockServiceMockRecorder) GetBillByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillByID", reflect.TypeOf((*MockService)(nil).GetBillByID), arg0, arg1)
}
